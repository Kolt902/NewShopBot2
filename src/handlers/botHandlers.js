import { logger } from '../config/logger.js';

export const startCommand = async (ctx) => {
  try {
    const webAppUrl = ctx.config.APP_URL.replace(/\/$/, '');
    
    await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ESENTION!\n\nüõçÔ∏è –£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n- –ü—Ä–µ–º–∏–∞–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É\n- –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n- –°—Ç–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üé≠ Old Money', web_app: { url: `${webAppUrl}?category=oldmoney` } },
            { text: 'üåÜ Streetwear', web_app: { url: `${webAppUrl}?category=streetwear` } }
          ],
          [
            { text: '‚ú® Luxury', web_app: { url: `${webAppUrl}?category=luxury` } },
            { text: 'üèÉ‚Äç‚ôÇÔ∏è Sport', web_app: { url: `${webAppUrl}?category=sport` } }
          ],
          [
            { text: 'üëî –ú—É–∂—Å–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è', web_app: { url: `${webAppUrl}?gender=men` } },
            { text: 'üëó –ñ–µ–Ω—Å–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è', web_app: { url: `${webAppUrl}?gender=women` } }
          ],
          [{
            text: 'üõç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
            web_app: { url: webAppUrl }
          }]
        ]
      }
    });
    logger.info(`Start command handled for user ${ctx.from.id}, using URL: ${webAppUrl}`);
  } catch (error) {
    logger.error('Error in /start command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const helpCommand = async (ctx) => {
  try {
    await ctx.reply(
      'üõçÔ∏è *ESENTION Shop* - –≤–∞—à –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã\n\n' +
      '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n' +
      '/start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
      '/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
      '*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥—ã:*\n' +
      '‚Ä¢ Old Money - –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ –∫–ª–∞—Å—Å–∏–∫–∞\n' +
      '‚Ä¢ Streetwear - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–ª–∏—á–Ω—ã–π —Å—Ç–∏–ª—å\n' +
      '‚Ä¢ Luxury - –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n' +
      '‚Ä¢ Sport - –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞\n\n' +
      '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logger.error('Error in /help command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const catalogCommand = async (ctx) => {
  try {
    const webAppUrl = ctx.config.APP_URL.replace(/\/$/, '');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üé≠ Old Money', web_app: { url: `${webAppUrl}?category=oldmoney` } },
            { text: 'üåÜ Streetwear', web_app: { url: `${webAppUrl}?category=streetwear` } }
          ],
          [
            { text: '‚ú® Luxury', web_app: { url: `${webAppUrl}?category=luxury` } },
            { text: 'üèÉ‚Äç‚ôÇÔ∏è Sport', web_app: { url: `${webAppUrl}?category=sport` } }
          ]
        ]
      }
    });
  } catch (error) {
    logger.error('Error in /catalog command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const handleWebAppData = async (ctx) => {
  if (ctx.message?.web_app_data?.data) {
    try {
      const data = JSON.parse(ctx.message.web_app_data.data);
      await ctx.reply(
        '‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n' +
        `üõç –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${data.totalAmount} ‚ÇΩ\n\n` +
        '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.',
        { parse_mode: 'HTML' }
      );
      logger.info(`Order received from user ${ctx.from.id}:`, data);
    } catch (error) {
      logger.error('Error processing web app data:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}; 